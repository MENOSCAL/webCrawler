Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

ParallelWebCrawler is multi-threads and will download more pages than SequentialWebCrawler.
Therefore, PageParserImpl takes longer to parse the data.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

ParallelWebCrawler use fork-join pool to perform parallel processing  with larger data, but consumes resources for each thread.
So, an older computer has a single core processor, these steps reduce performance more in ParallelWebCrawler than in SequentialWebCrawler to read more web pages.


    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

On a multi-core computer, ParallelWebCrawler will outperform SequentialWebCrawler because it supports multi-threading and can download multiple pages at the same time.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

Time performance measurement.


    (b) What are the join points of the Profiler in the web crawler program?

Methods with @Profiled annotation.


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

1. Dependency Injection: ParallelWebCrawler and Sequential WebCrawler.
Like: No need to worry about instantiate new object.
Dislike: More classes and interfaces required.

2. Builder Pattern: CrawlResult and CrawlerConfiguration.
Like: It simplifies the creation of instances of complex constructor classes.
Dislike: More coding.

3. Dynamic Proxy: Profiler, ProfilerImpl, ProfilerModule, ProfilingMethodInterceptor, ProfilingState
Like: Offers a nice way to work with interfaces at runtime. At the time of Program execution, the state has been recorded.
Dislike: Makes the code more complicated to understand.

